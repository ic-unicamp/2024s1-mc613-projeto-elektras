// IDEIAS PARA A IMPLEMENTAÇÃO
1. usar um vetor de tamanho 307200, com 32 bits para cada elemento, para representar os blocos e suas cores 
declarar dessa forma:
reg [31:0] pixel[307200];

2. implementar apenas um módulo de bloco e testar ele (só fazer outros módulos depois)

3. pesquisar generate de verilog e parâmetro!!!!! professor falou pra gabi, que falou pra let e pra lu

4. no placar.v, passar o sinal de endgame (que é saída de move_ball.v) para ver se diminui q qnt de vidas restantes
(com a lógica do start eu acho que n vai dar certo)

// TO DO

1 - verificar se a lógica do placar está correta (ok)

2 - fazer o módulo do bloco (ok)

3 - arrumar lógica do movimento da bola qnd bate na barra (ok)

4 - o hit_block entra como um or de todos os hit blocks no placar e no move_ball, mas nao no top (ok)

5 - fazer um contador que comeca na quantidade de blocos e termina em zero - youwin (quase ok)

6 - tratar o endgame e o youwin no top

7 - fazer lógica da bola bater no bloco por cima (ok)

8 - vamos fazer um contador para o youwin

9 - escrever OVER no display quando acabarem as vidas (e o jogador nao ganhar o jogo)

10 - entender por que o display de vidas não começa com 10 (ok)

11 - entender por que nao acrescenta 1 quando bateu no bloco (ok)

12 - pra cada tipo de colisao da bola nos blocos, fazer um or entre todos (ok)

13 - a bola nao colide quando bate na quina do bloco. consertar isso

14 - colocar as cores nos blocos

15 - fazer desenhos para incrementar o visual do jogo